# -*- coding: utf-8 -*-
"""
本程序给出SnowNLP的简单用法

更多例子见：https://pypi.python.org/pypi/snownlp/0.12.3

github:https://github.com/isnowfy/snownlp
"""

from snownlp import SnowNLP
import jieba

'''1.分词功能（比jieba略差，推荐使用jieba进行分词）'''

testString="SnowNLP是一个python写的类库，可以方便的处理中文文本内容，是受到了TextBlob的启发而写的，由于现在大部分的自然语言处理库基本都是针对英文的，于是写了一个方便处理中文的类库，并且和TextBlob不同的是，这里没有用NLTK，所有的算法都是自己实现的，并且自带了一些训练好的字典"
cutWork1=list(jieba.cut(testString))
print(cutWork1)
'''jieba分词输出：
['SnowNLP', '是', '一个', 'python', '写', '的', '类库', '，', '可以', '方便', '的', '处理', '中文', '文本', '内容', '，', '是', '受到', '了', 'TextBlob', '的', '启发', '而', '写', '的', '，', '由于', '现在', '大部分', '的', '自然语言', '处理', '库', '基本', '都', '是', '针对', '英文', '的', '，', '于是', '写', '了', '一个', '方便', '处理', '中文', '的', '类库', '，', '并且', '和', 'TextBlob', '不同', '的', '是', '，', '这里', '没有', '用', 'NLTK', '，', '所有', '的', '算法', '都', '是', '自己', '实现', '的', '，', '并且', '自带', '了', '一些', '训练', '好', '的', '字典']
'''
curWork2=SnowNLP(testString).words
print(curWork2)
'''SnowNLP分词输出
['SnowNLP', '是', '一个', 'python', '写', '的类', '库', '，', '可以', '方便', '的', '处理', '中文', '文本', '内容', '，', '是', '受到', '了', 'TextBlob', '的', '启发', '而', '写', '的', '，', '由于', '现在', '大部分', '的', '自然', '语言', '处理', '库', '基本', '都', '是', '针对', '英文', '的', '，', '于是', '写', '了', '一个', '方便', '处理', '中文', '的类', '库', '，', '并且', '和', 'TextBlob', '不同', '的', '是', '，', '这里', '没有', '用', 'NLTK，', '所有', '的', '算法', '都', '是', '自己', '实现', '的', '，', '并且', '自', '带', '了', '一些', '训练', '好', '的', '字典']
'''

'''2.词性标注'''
testString1="SnowNLP是一个python写的类库，可以方便的处理中文文本内容，是受到了TextBlob的启发而写的"

tag=list(SnowNLP(testString1).tags)
print(tag)
'''
[('SnowNLP', 'Dg'), ('是', 'v'), ('一个', 'm'), ('python', 'q'), ('写', 'v'), ('的类', 'h'), ('库', 'n'), ('，', 'w'), ('可以', 'v'), ('方便', 'a'), ('的', 'u'), ('处理', 'v'), ('中文', 'nz'), ('文本', 'n'), ('内容', 'n'), ('，', 'w'), ('是', 'v'), ('受到', 'v'), ('了', 'u'), ('TextBlob', 'a'), ('的', 'u'), ('启发', 'vn'), ('而', 'c'), ('写', 'v'), ('的', 'u')]
'''

'''3.断句'''
sentences=list(SnowNLP(testString1).sentences)
print(sentences)
'''
['SnowNLP是一个python写的类库', '可以方便的处理中文文本内容', '是受到了TextBlob的启发而写的']
'''

'''4.情绪判断(对英文的处理效果不好)

返回值为正面情绪的概率，

越接近1表示正面情绪

越接近0表示负面情绪'''
text1="这个人脾气真心不好，老是骂人"
text2="这个人给人的感觉不错，经常笑"
text3="这家伙给人感觉一般般"
text4="你是个好人"
text5="你真坏"
text6="为什么你这么不要脸"
text7="I love you"
sentiment1=SnowNLP(text1).sentiments#0.08032424324970644
sentiment2=SnowNLP(text2).sentiments#0.9531216798451757
sentiment3=SnowNLP(text3).sentiments#0.7117029223494293
sentiment4=SnowNLP(text4).sentiments#0.6948221395657904
sentiment5=SnowNLP(text5).sentiments#0.5
sentiment6=SnowNLP(text6).sentiments#0.3669724770642201
sentiment7=SnowNLP(text7).sentiments#0.16368193611936954

'''5.拼音'''
testString3="这个人给人的感觉不错，经常笑"
pinyinNote=SnowNLP(testString3).pinyin
print(pinyinNote)
'''
['zhe', 'ge', 'ren', 'gei', 'ren', 'de', 'gan', 'jue', 'bu', 'cuo', '，', 'jing', 'chang', 'xiao']
'''

'''6.繁体转简体'''
testString4="雪國觀光圈是由7個鄉鎮所組成。一年之中有將近半年的時間，都被大雪所封閉。"
hanzi=SnowNLP(testString4).han
print(hanzi)
'''
雪国观光圈是由7个乡镇所组成。一年之中有将近半年的时间，都被大雪所封闭。
'''

'''7.关键词抽取'''
testString5='''
从前有个可爱的小姑娘，谁见了都喜欢，但最喜欢她的是她的奶奶，因为不论她
要什么，奶奶就会给她什么。一次，奶奶送给小姑娘一顶用丝绒做的小红帽，戴
在她的头上可好看了。从此，小姑娘再也不愿意戴任何别的帽子，于是大家便开
始叫她小红帽
'''
keywords=SnowNLP(testString5).keywords(limit=10)
print(keywords)
'''
['小姑娘', '奶奶', '顶用', '丝绒', '喜欢', '小', '做', '红帽', '送给', '好看']
'''

'''8.概括总结文意'''
summary=SnowNLP(testString5).summary(limit=3)
print(summary)
'''
['奶奶送给小姑娘一顶用丝绒做的小红帽', '但最喜欢她的是她的奶奶', '小姑娘再也不愿意戴任何别的帽子']
'''

'''9.文本相似性'''
s = SnowNLP([['这篇', '文章'],
                ['那篇', '论文'],
                ['这个']])


sim= s.sim(['文章'])
print(sim)
'''
[0.4686473612532025, 0, 0]
'''

'''10.信息量衡量

TF-IDF是一种统计方法，用以评估一字词对于一个文件集或一个语料库中的其中一份文件的重要程度。

TF词频越大越重要，但是文中会的“的”，“你”等无意义词频很大，却信息量几乎为0，这种情况导致单纯看词频评

价词语重要性是不准确的。因此加入了IDF,IDF的主要思想是：如果包含词条t的文档越少，也就是n越小，IDF

越大，则说明词条t越重要。TF-IDF综合起来，才能准确的综合的评价一词对文本的重要性。'''

print(s.tf)
'''
[{'这篇': 1, '文章': 1}, {'论文': 1, '那篇': 1}, {'这个': 1}]
'''
print(s.idf)
'''
{'这个': 0.5108256237659907, '这篇': 0.5108256237659907, '文章': 0.5108256237659907, '论文': 0.5108256237659907, '那篇': 0.5108256237659907}
'''


